package com.rusefi.pinout;

import com.rusefi.ReaderStateImpl;
import com.rusefi.enum_reader.Value;
import com.rusefi.newparse.ParseState;
import org.junit.Test;

import java.io.*;
import java.util.Collections;
import java.util.List;

import static org.junit.Assert.assertEquals;

public class PinoutLogicIntegratedTest {
    @Test
    public void testWholeThing() throws IOException {
        runPinoutTest("pins:\n" +
                "  - pin: 1\n" +
                "    id: [E11, E11]\n" +
                "    class: [event_inputs, switch_inputs]\n" +
                "    function: Digital trigger/switch input for instance Hall type CAM\n" +
                "    ts_name: Digital 2\n" +
                "    type: din",
                "//DO NOT EDIT MANUALLY, let automation work hard.\n" +
                        "\n" +
                        "// auto-generated by PinoutLogic.java based on key\n" +
                        "#include \"pch.h\"\n" +
                        "\n" +
                        "// see comments at declaration in pin_repository.h\n" +
                        "const char * getBoardSpecificPinName(brain_pin_e brainPin) {\n" +
                        "\tswitch(brainPin) {\n" +
                        "\t\tcase Gpio::E11: return \"Digital 2\";\n" +
                        "\t\tdefault: return nullptr;\n" +
                        "\t}\n" +
                        "\treturn nullptr;\n" +
                        "}\n");

    }

    @Test
    public void testTemplate() throws IOException {
        runPinoutTest("pins:\n" +
                        "  - pin: 1\n" +
                        "    id: [E11, E11]\n" +
                        "    class: [event_inputs, switch_inputs]\n" +
                        "    function: Digital trigger/switch input for instance Hall type CAM\n" +
                        "    ts_name: ___ - Digital 2\n" +
                        "    type: din",
                "//DO NOT EDIT MANUALLY, let automation work hard.\n" +
                        "\n" +
                        "// auto-generated by PinoutLogic.java based on key\n" +
                        "#include \"pch.h\"\n" +
                        "\n" +
                        "// see comments at declaration in pin_repository.h\n" +
                        "const char * getBoardSpecificPinName(brain_pin_e brainPin) {\n" +
                        "\tswitch(brainPin) {\n" +
                        "\t\tcase Gpio::E11: return \"1 - Digital 2\";\n" +
                        "\t\tdefault: return nullptr;\n" +
                        "\t}\n" +
                        "\treturn nullptr;\n" +
                        "}\n");

    }

    private static void runPinoutTest(String inputYaml, String expected) throws IOException {
        StringWriter testWriter = new StringWriter();

        Reader input = new StringReader(inputYaml);

        BoardInputs testBoard = new BoardInputs() {
            @Override
            public List<?> getBoardYamlKeys() {
                return Collections.singletonList("key");
            }

            @Override
            public Reader getReader(Object yamlKey) {
                return input;
            }

            @Override
            public String getName() {
                return "test";
            }

            @Override
            public List<String> getInputFiles() {
                throw new UnsupportedOperationException();
            }

            @Override
            public Writer getWriter() {
                return testWriter;
            }
        };

        ReaderStateImpl state = new ReaderStateImpl();

        state.getEnumsReader().read(new StringReader("enum class Gpio : uint16_t {\n" +
                                                        "Unassigned = 0,\n" +
                                                        "Invalid = 1,\n" +
                                                        "E11 = 0x0B,\n" +
                                                        "};"));

        ParseState definitionState = new ParseState(state.getEnumsReader());

        PinoutLogic logic = new PinoutLogic(testBoard);

        logic.registerBoardSpecificPinNames(state.getVariableRegistry(), definitionState, state.getEnumsReader());

        assertEquals(expected, testWriter.getBuffer().toString());
    }

    @Test
    public void parseInt() {
        assertEquals(1, Value.parseInt("1"));
        assertEquals(10, Value.parseInt("0x0a"));
        assertEquals(10, Value.parseInt("0xa"));
        assertEquals(10, Value.parseInt("0Xa"));
        assertEquals(11, Value.parseInt("0x0B"));
    }
}
