name: HW CI

on: [push, pull_request]

jobs:
  build-firmware:
    strategy:
      # Let all builds finish even if one fails early
      fail-fast: false
      matrix:
        include:
          # - build-target: f407-discovery
          #   runs-on: hw-ci-f4-discovery
          #   test-suite: com.rusefi.HwCiF4Discovery
          #   folder: config/boards/f407-discovery
          #   openocd-script: ../.github/workflows/openocd_ci_f4_discovery.cfg
          #   serial-device: /dev/serial/by-id/usb-FOME_FOME_Engine_Management_ECU_2B003B000A51343033393930-if01

          - build-target: f407-discovery
            runs-on: hw-ci-f4-discovery-2
            test-suite: com.rusefi.HwCiF4Discovery
            folder: config/boards/f407-discovery
            openocd-script: ../.github/workflows/openocd_ci_f4_discovery_2.cfg
            serial-device: /dev/serial/by-id/usb-FOME_FOME_Engine_Management_ECU_1E0032000851353238333131-if01

          # - build-target: proteus_f4
          #   runs-on: hw-ci-proteus
          #   test-suite: com.rusefi.HwCiF4Proteus
          #   folder: config/boards/proteus
          #   openocd-script: ../.github/workflows/openocd_ci_proteus.cfg
          #   serial-device: /dev/serial/by-id/usb-FOME_FOME_Engine_Management_ECU_41003D000451383037343335-if01

    runs-on: ${{matrix.runs-on}}

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - name: Identify Agent
      run: uname -a

    - name: Add compiler to PATH
      run: echo "$HOME/.rusefi-tools/arm-gnu-toolchain-11.3.rel1-x86_64-arm-none-eabi/bin" >> $GITHUB_PATH

    # Make sure the compiler works
    - name: Test/Identify Compiler
      run: arm-none-eabi-gcc -v

    - name: Set EXTRA env
      run: |
        echo "EXTRA_2_PARAMS=-DHARDWARE_CI" >> $GITHUB_ENV
        echo "HARDWARE_CI_SERIAL_DEVICE=${{matrix.serial-device}}" >> $GITHUB_ENV

    - name: Build Firmware
      run: .github/workflows/hw-ci/build_for_hw_ci.sh ${{matrix.folder}} ${{matrix.build-target}}

    - name: Check for STLINK
      run: lsusb | grep 'ST-LINK\|STLINK'

    - name: OpenOCD wipe & flash STM32
      working-directory: ./firmware
      run: openocd -f "${{matrix.openocd-script}}" -c init -c targets -c "reset halt" -c "flash erase_sector 0 0 11" -c "flash write_image "deliver/fome.bin" 0x08000000" -c "reset run" -c "shutdown"

    # This both compiles and runs HW CI tests
    - name: Run Hardware CI
      run: .github/workflows/hw-ci/run_hw_ci.sh ${{matrix.test-suite}}

